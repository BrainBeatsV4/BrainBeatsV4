// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  firstName String    @db.VarChar(255)
  lastName  String    @db.VarChar(255) 
  email     String    @unique @db.VarChar(255)
  dob       DateTime  @db.Date
  username  String    @unique @db.VarChar(20)
  password  String
  bio       String?   @db.LongText
  profilePicture String?   @db.LongText // Store file path in database instead of the actual image
  createdAt DateTime  @default(now())
  Posts Post[]
  Playlists Playlist[]
  Likes Like[]
}

model Post {
  id       Int       @id @default(autoincrement())
  title    String
  bpm      Int       @db.Int
  key      String    @db.VarChar(255)
  likeCount Int
  thumbnail String?   @db.LongText // Store file path in database instead of the actual image
  visibility Boolean
  user   User      @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID String // relation scalar field  (used in the `@relation` attribute above)
  createdAt DateTime  @default(now())
  Likes Like[]
  PlaylistPosts PlaylistPost[]
}

model Playlist {
  id       Int       @id @default(autoincrement())
  name     String
  thumbnail String?  @db.LongText // Store file path in database instead of the actual image
  user User          @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID String
  PlaylistPosts PlaylistPost[]
}

model PlaylistPost {
  postID Int
  post Post @relation(fields: [postID], references: [id], onDelete: Cascade)
  playlistID Int
  playlist Playlist @relation(fields: [playlistID], references: [id], onDelete: Cascade)
  
  @@id([postID, playlistID])
}

model Like {
  postID Int         @id
  post Post          @relation(fields: [postID], references: [id], onDelete: Cascade)
  userID String
  user User          @relation(fields: [userID], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}